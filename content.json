{"meta":{"title":"yakir's notes","subtitle":"小记","description":"yakirChen","author":"yakirChen","url":"http://yakirchen.com","root":"/"},"pages":[{"title":"about","date":"2017-08-25T07:31:22.000Z","updated":"2018-12-06T06:46:47.000Z","comments":true,"path":"about/index.html","permalink":"http://yakirchen.com/about/index.html","excerpt":"","text":"Hello ! I am yakir 😊 . 这是我的备忘笔记，还有各种想分享的文章、片段。"}],"posts":[{"title":"Install PostgreSQL From A Tarball","slug":"2018/11-18-Install PostgreSQL From A Tarball","date":"2018-11-22T16:00:00.000Z","updated":"2019-01-07T03:22:34.000Z","comments":true,"path":"2018/11-18-Install PostgreSQL From A Tarball/","link":"","permalink":"http://yakirchen.com/2018/11-18-Install PostgreSQL From A Tarball/","excerpt":"","text":"安装包下载PostgreSQL macOS packagesenterprisedb postgresql binaries 初始化12345export PGSOCKET=/Volumes/Toshiba/repos/postgresqlexport PGDATA=/Volumes/Toshiba/repos/postgresql/dataexport PGWAL=/Volumes/Toshiba/repos/postgresql/walinitdb -D $&#123;PGDATA&#125; -W -X $&#123;PGWAL&#125; -E UTF8 -A scram-sha-256# 初始化的过程中不要在MySQL的`data`目录中放任何内容 ## 使用SSL链接~~1234567~~openssl req -new -x509 -days 36500 -nodes -text -out $&#123;PGDATA&#125;/server.crt -keyout $&#123;PGDATA&#125;/server.key~~~~chmod og-rwx $&#123;PGDATA&#125;/server.key~~~~```~~## 启动服务```bashpg_ctl -D $&#123;PGDATA&#125; start 命令行客户端连接1./psql -U yakir -h $&#123;PGSOCKET&#125; -d postgres 创建schema12345678CREATE DATABASE yakirdb WITH OWNER = yakir ENCODING = 'UTF8' TABLESPACE = pg_default LC_COLLATE = 'zh_CN.UTF-8' LC_CTYPE = 'zh_CN.UTF-8' CONNECTION LIMIT = -1 TEMPLATE template0;","categories":[{"name":"Tech","slug":"Tech","permalink":"http://yakirchen.com/categories/Tech/"}],"tags":[{"name":"macOS","slug":"macOS","permalink":"http://yakirchen.com/tags/macOS/"},{"name":"Data","slug":"Data","permalink":"http://yakirchen.com/tags/Data/"},{"name":"PostgreSQL","slug":"PostgreSQL","permalink":"http://yakirchen.com/tags/PostgreSQL/"}]},{"title":"想要一个独立的JS Runtime 就V8啦","slug":"2018/11-09-想要一个独立的JS Runtime 就V8啦","date":"2018-11-08T16:00:00.000Z","updated":"2018-12-06T06:46:47.000Z","comments":true,"path":"2018/11-09-想要一个独立的JS Runtime 就V8啦/","link":"","permalink":"http://yakirchen.com/2018/11-09-想要一个独立的JS Runtime 就V8啦/","excerpt":"","text":"获得源码12345678910111213git clone https://chromium.googlesource.com/chromium/tools/depot_tools.gitmkdir depot_tools &amp;&amp; \\ cd depot_tools &amp;&amp; \\ git init &amp;&amp; \\ git remote add origin xxx.git &amp;&amp; \\ git fetch --all &amp;&amp; \\ git checkout master export PATH=$PATH:/Volumes/Toshiba/dev/tools/depot_toolsexport DEPOT_TOOLS_UPDATE=0gclient config https://github.com/v8/v8.gitgclient sync Referencedepot_tools_tutorial(7) Manual Page","categories":[{"name":"Tech","slug":"Tech","permalink":"http://yakirchen.com/categories/Tech/"}],"tags":[{"name":"macOS","slug":"macOS","permalink":"http://yakirchen.com/tags/macOS/"},{"name":"v8","slug":"v8","permalink":"http://yakirchen.com/tags/v8/"},{"name":"js","slug":"js","permalink":"http://yakirchen.com/tags/js/"}]},{"title":"OpenCV 4","slug":"2018/11-08-opencv4","date":"2018-11-07T16:00:00.000Z","updated":"2018-12-06T06:46:47.000Z","comments":true,"path":"2018/11-08-opencv4/","link":"","permalink":"http://yakirchen.com/2018/11-08-opencv4/","excerpt":"","text":"Python312345678910pip3 install virtualenv virtualenvwrapper# modify ~/.zshrcexport WORKON_HOME=/Volumes/Toshiba/repos/venvexport VIRTUALENVWRAPPER_PYTHON=$&#123;PY3_HOME&#125;/bin/python3source $&#123;PY3_HOME&#125;/bin/virtualenvwrapper.shmkvirtualenv cv -p python3workon cvpip install numpy Build OpenCV123456789101112131415161718git clone --depth 1 git@github.com:opencv/opencv.gitgit clone --depth 1 git@github.com:opencv/opencv_contrib.gitcd opencv &amp;&amp; \\mkdir build &amp;&amp; \\cd build &amp;&amp; \\cmake -D CMAKE_BUILD_TYPE=RELEASE \\ -D CMAKE_INSTALL_PREFIX=/Users/yakir/local/opencv \\ -D OPENCV_EXTRA_MODULES_PATH=/Volumes/Toshiba/dev/tools/opencv_contrib/modules \\ -D PYTHON3_LIBRARY=`python -c 'import subprocess ; import sys ; s = subprocess.check_output(\"python-config --configdir\", shell=True).decode(\"utf-8\").strip() ; (M, m) = sys.version_info[:2] ; print(\"&#123;&#125;/libpython&#123;&#125;.&#123;&#125;.dylib\".format(s, M, m))'` \\ -D PYTHON3_INCLUDE_DIR=`python -c 'import distutils.sysconfig as s; print(s.get_python_inc())'` \\ -D PYTHON3_EXECUTABLE=$VIRTUAL_ENV/bin/python \\ -D BUILD_opencv_python2=OFF \\ -D BUILD_opencv_python3=ON \\ -D INSTALL_PYTHON_EXAMPLES=ON \\ -D INSTALL_C_EXAMPLES=OFF \\ -D BUILD_EXAMPLES=ON ..make -j 12 &amp;&amp; make install Xcode 项目设置 ReferenceInstall OpenCV 4 on macOS","categories":[{"name":"Tech","slug":"Tech","permalink":"http://yakirchen.com/categories/Tech/"}],"tags":[{"name":"macOS","slug":"macOS","permalink":"http://yakirchen.com/tags/macOS/"},{"name":"opencv","slug":"opencv","permalink":"http://yakirchen.com/tags/opencv/"}]},{"title":"vim模式&按键映射","slug":"2018/09-05-vim模式&按键映射","date":"2018-09-04T16:00:00.000Z","updated":"2018-12-06T07:03:39.000Z","comments":true,"path":"2018/09-05-vim模式&按键映射/","link":"","permalink":"http://yakirchen.com/2018/09-05-vim模式&按键映射/","excerpt":"","text":"控制字符macOS Key bindings控制字符控制键#符号转义字符转换键 macOS Unicode 十六进制输入系统偏好设置 &gt; 添加输入法 &gt; 其他 &gt; Unicode 十六进制输入语言栏切换到Unicode输入，按Option键同时输入Unicode编码即可 Apple/Command: 2318 ⌘Alt/Option: 2325 ⌥Shift: 21E7 ⇧Enter: 23ce ⏎Delete: 232B ⌫ESC: 238B ⎋Control: 2303 ⌃Capslock: 21ea ⇪Tab: 8677 ⇥Apple Logo: F8FF or Option-Shift-K  模式 Normal Mode 普通模式, Terminal vim 之后, 所处在的默认模式 Visual Mode 阅览模式, Visual 可以选择字符、行、列, 在 Normal 下, 按 v, V, &lt;CTRL&gt;+v 进入阅览模式 Command Mode 命令模式, 在 Normal 下, 按 : 进入命令模式, 在 Normal 下, 按 Q 进入多行命令模式 Insert Mode 输入模式, 在 Normal 下, 按 i, I, a, A, o, O 进入输入模式 键盘映射命令行模式下输入 :h key-notation 或 :h key-codes 或 :h keycodes 查看键盘符号 获得help1234vim +help# 等同在 命令模式下输入 `:help`# 在help页输入命令 `:only` 全窗口显示帮助页 vim自带文档转换为html123mkdir vim-docs &amp;&amp; cd vim-docssudo perl /usr/share/vim/vim80/doc/vim2html.pl /usr/share/vim/vim80/doc/*.*chown &lt;YOUR-USER-NAME&gt;:staff * 中文翻译 macOS 默认按键绑定/System/Library/Frameworks/AppKit.framework/Resources/StandardKeyBinding.dict *省略Mode, xxx Mode 看着乱…懒….","categories":[{"name":"Tech","slug":"Tech","permalink":"http://yakirchen.com/categories/Tech/"}],"tags":[{"name":"macOS","slug":"macOS","permalink":"http://yakirchen.com/tags/macOS/"},{"name":"vim","slug":"vim","permalink":"http://yakirchen.com/tags/vim/"}]},{"title":"vim拓展命令","slug":"2018/09-5-vim拓展命令","date":"2018-09-04T16:00:00.000Z","updated":"2018-12-06T06:46:47.000Z","comments":true,"path":"2018/09-5-vim拓展命令/","link":"","permalink":"http://yakirchen.com/2018/09-5-vim拓展命令/","excerpt":"","text":":%TOhtml 转换vim自带文档为html","categories":[{"name":"Tech","slug":"Tech","permalink":"http://yakirchen.com/categories/Tech/"}],"tags":[{"name":"macOS","slug":"macOS","permalink":"http://yakirchen.com/tags/macOS/"},{"name":"vim","slug":"vim","permalink":"http://yakirchen.com/tags/vim/"}]},{"title":"拔高","slug":"2018/07-20-拔高","date":"2018-07-19T16:00:00.000Z","updated":"2018-12-06T06:46:47.000Z","comments":true,"path":"2018/07-20-拔高/","link":"","permalink":"http://yakirchen.com/2018/07-20-拔高/","excerpt":"","text":"“不再谈论一些大家并不感兴趣的话题来拔高自己。” 出处: 经常看书的人和不看书的人有什么区别？-小水的回答-知乎","categories":[{"name":"🤔","slug":"🤔","permalink":"http://yakirchen.com/categories/🤔/"}],"tags":[{"name":"🤔","slug":"🤔","permalink":"http://yakirchen.com/tags/🤔/"}]},{"title":"GnuPG Install And Share Public-Key","slug":"2018/07-17-gnupg-install-share-public-key","date":"2018-07-16T16:00:00.000Z","updated":"2018-12-06T06:46:47.000Z","comments":true,"path":"2018/07-17-gnupg-install-share-public-key/","link":"","permalink":"http://yakirchen.com/2018/07-17-gnupg-install-share-public-key/","excerpt":"","text":"使用过程中不是很顺利, 是不是因为编译安装产生的问题, 不过还是想记录一下, 作为备忘录 PrepareGnuPG 源码包下载, 包括依赖 源码包 版本 链接 GnuPG 2.2.9 http://www.ring.gr.jp/pub/net/gnupg/gnupg/ Libgpg-error 1.32 http://www.ring.gr.jp/pub/net/gnupg/libgpg-error/ Libgcrypt 1.8.3 http://www.ring.gr.jp/pub/net/gnupg/libgcrypt/ Libksba 1.3.5 http://www.ring.gr.jp/pub/net/gnupg/libksba/ Libassuan 2.5.1 http://www.ring.gr.jp/pub/net/gnupg/libassuan/ ntbTLS 0.1.2 http://www.ring.gr.jp/pub/net/gnupg/ntbtls/ nPth 1.6 http://www.ring.gr.jp/pub/net/gnupg/npth/ Pinentry 1.1.0 http://www.ring.gr.jp/pub/net/gnupg/pinentry/ 构建安装123456789101112131415161718192021222324252627282930313233343536373839pkgs=( \"libgpg-error-1.32.tar.gz\" \"libgcrypt-1.8.3.tar.gz\" \"libassuan-2.5.1.tar.bz2\" \"libksba-1.3.5.tar.bz2\" \"npth-1.6.tar.bz2\" \"gnupg-2.2.10.tar.bz2\" \"gettext-0.19.8.1.tar.xz\" \"pinentry-1.1.0.tar.bz2\" \"ntbtls-0.1.2.tar.bz2\");urls=( \"https://gnupg.org/ftp/gcrypt/libgpg-error/$&#123;pkgs[1]&#125;\" \"https://gnupg.org/ftp/gcrypt/libgcrypt/$&#123;pkgs[2]&#125;\" \"https://gnupg.org/ftp/gcrypt/libassuan/$&#123;pkgs[3]&#125;\" \"https://gnupg.org/ftp/gcrypt/libksba/$&#123;pkgs[4]&#125;\" \"https://gnupg.org/ftp/gcrypt/npth/$&#123;pkgs[5]&#125;\" \"https://gnupg.org/ftp/gcrypt/gnupg/$&#123;pkgs[6]&#125;\" \"https://ftp.gnu.org/pub/gnu/gettext/$&#123;pkgs[7]&#125;\" \"https://gnupg.org/ftp/gcrypt/pinentry/$&#123;pkgs[8]&#125;\" \"https://gnupg.org/ftp/gcrypt/ntbtls/$&#123;pkgs[9]&#125;\");for pkg in $&#123;urls[@]&#125;; do curl -OL $&#123;pkg&#125;done;for pkg in $&#123;pkgs[@]&#125;; do if [[ -f $&#123;pkg&#125; ]]; then if [[ 'gz' == $&#123;pkg##*.&#125; ]]; then tar -zxf $&#123;pkg&#125; elif [[ 'bz2' == $&#123;pkg##*.&#125; ]]; then tar -jxf $&#123;pkg&#125; elif [[ 'xz' == $&#123;pkg##*.&#125; ]]; then tar -Jxf $&#123;pkg&#125; fi fidone; 常用Command12345678910# 生成keygpg --full-gen-keygpgconf --kill gpg-agent &amp;&amp; gpg-agent --use-standard-socket --pinentry-program $&#123;LOCAL&#125;/pinentry/bin/pinentry --daemongpg --list-secret-keys --keyid-format SHORTgpg --list-secret-keys --keyid-format LONGgpg -vvv --debug-all --keyserver keyserver.opensuse.org --send-keys KEY-IDSgpg -v --keyserver keyserver.ubuntu.com --send-keys KEY-IDS# 导出公钥gpg --export -a KEY-ID &gt; KEY-ID.key Share我这边一直不能 send key 操作原因? 安装原因? 未探究… 因为不能通过 gpg --send-keys 所以手工在页面中 submit 😑用了opensuse的keyserver submit http://keyserver.opensuse.org/ 这是我提交成功的公钥:http://keyserver.opensuse.org/pks/lookup?search=0x0A35CCA4&amp;fingerprint=on&amp;hash=on&amp;op=vindexhttp://keyserver.ubuntu.com/pks/lookup?search=0x0A35CCA4&amp;fingerprint=on&amp;hash=on&amp;op=get","categories":[{"name":"Tech","slug":"Tech","permalink":"http://yakirchen.com/categories/Tech/"}],"tags":[{"name":"macOS","slug":"macOS","permalink":"http://yakirchen.com/tags/macOS/"},{"name":"Tech","slug":"Tech","permalink":"http://yakirchen.com/tags/Tech/"}]},{"title":"天目古翠","slug":"2018/07-16-天目古翠","date":"2018-07-16T01:01:00.000Z","updated":"2018-12-06T06:46:47.000Z","comments":true,"path":"2018/07-16-天目古翠/","link":"","permalink":"http://yakirchen.com/2018/07-16-天目古翠/","excerpt":"","text":"","categories":[{"name":"摄影","slug":"摄影","permalink":"http://yakirchen.com/categories/摄影/"}],"tags":[{"name":"摄影","slug":"摄影","permalink":"http://yakirchen.com/tags/摄影/"},{"name":"Phone","slug":"Phone","permalink":"http://yakirchen.com/tags/Phone/"}]},{"title":"Build Wget on macOS","slug":"2018/05-06-build-wget-on-macOS","date":"2018-05-05T16:00:00.000Z","updated":"2018-12-06T06:46:47.000Z","comments":true,"path":"2018/05-06-build-wget-on-macOS/","link":"","permalink":"http://yakirchen.com/2018/05-06-build-wget-on-macOS/","excerpt":"","text":"获取源码包GNU Wget depend onZlibopenssl configure &amp; make123456789101112131415161718192021222324252627282930./configure --prefix=$&#123;LOCAL&#125;/wget \\ --with-ssl=openssl \\ --with-openssl=yes \\ --with-gnu-ld=no \\ --with-libssl-prefix=/Users/yakir/local \\ --without-libgnutls-prefix# configure result# Version: 1.19.5# Host OS: darwin17.5.0# Install prefix: /Users/yakir/local/wget# Compiler: gcc# CFlags: -I/Users/yakir/local/include -DNDEBUG -I/Users/yakir/local/include -I/Users/yakir/local/include/lzma -I/Users/yakir/local/include/openssl -I/Users/yakir/local/include/readline -I/Users/yakir/local/include -I/Users/yakir/local/include/lzma -I/Users/yakir/local/include/openssl -I/Users/yakir/local/include/readline# LDFlags: -L/Users/yakir/local/lib# Libs: -lssl -lcrypto -ldl -L/Users/yakir/local/lib -lz # SSL: openssl# Zlib: yes# PSL: no# Digest: yes# NTLM: yes# OPIE: yes# POSIX xattr: yes# Debugging: yes# Assertions: no# Valgrind: Valgrind testing not enabled# Metalink: no# Resolver: libc, --bind-dns-address and --dns-servers not available# GPGME: no# IRI: no# Fuzzing build: no, 1make -j4 &amp;&amp; make install verify12wget --versionwget --help 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205GNU Wget 1.19.5, a non-interactive network retriever.Usage: wget [OPTION]... [URL]...Mandatory arguments to long options are mandatory for short options too.Startup: -V, --version display the version of Wget and exit -h, --help print this help -b, --background go to background after startup -e, --execute=COMMAND execute a `.wgetrc'-style commandLogging and input file: -o, --output-file=FILE log messages to FILE -a, --append-output=FILE append messages to FILE -d, --debug print lots of debugging information -q, --quiet quiet (no output) -v, --verbose be verbose (this is the default) -nv, --no-verbose turn off verboseness, without being quiet --report-speed=TYPE output bandwidth as TYPE. TYPE can be bits -i, --input-file=FILE download URLs found in local or external FILE -F, --force-html treat input file as HTML -B, --base=URL resolves HTML input-file links (-i -F) relative to URL --config=FILE specify config file to use --no-config do not read any config file --rejected-log=FILE log reasons for URL rejection to FILEDownload: -t, --tries=NUMBER set number of retries to NUMBER (0 unlimits) --retry-connrefused retry even if connection is refused --retry-on-http-error=ERRORS comma-separated list of HTTP errors to retry -O, --output-document=FILE write documents to FILE -nc, --no-clobber skip downloads that would download to existing files (overwriting them) --no-netrc don't try to obtain credentials from .netrc -c, --continue resume getting a partially-downloaded file --start-pos=OFFSET start downloading from zero-based position OFFSET --progress=TYPE select progress gauge type --show-progress display the progress bar in any verbosity mode -N, --timestamping don't re-retrieve files unless newer than local --no-if-modified-since don't use conditional if-modified-since get requests in timestamping mode --no-use-server-timestamps don't set the local file's timestamp by the one on the server -S, --server-response print server response --spider don't download anything -T, --timeout=SECONDS set all timeout values to SECONDS --dns-timeout=SECS set the DNS lookup timeout to SECS --connect-timeout=SECS set the connect timeout to SECS --read-timeout=SECS set the read timeout to SECS -w, --wait=SECONDS wait SECONDS between retrievals --waitretry=SECONDS wait 1..SECONDS between retries of a retrieval --random-wait wait from 0.5*WAIT...1.5*WAIT secs between retrievals --no-proxy explicitly turn off proxy -Q, --quota=NUMBER set retrieval quota to NUMBER --bind-address=ADDRESS bind to ADDRESS (hostname or IP) on local host --limit-rate=RATE limit download rate to RATE --no-dns-cache disable caching DNS lookups --restrict-file-names=OS restrict chars in file names to ones OS allows --ignore-case ignore case when matching files/directories -4, --inet4-only connect only to IPv4 addresses -6, --inet6-only connect only to IPv6 addresses --prefer-family=FAMILY connect first to addresses of specified family, one of IPv6, IPv4, or none --user=USER set both ftp and http user to USER --password=PASS set both ftp and http password to PASS --ask-password prompt for passwords --use-askpass=COMMAND specify credential handler for requesting username and password. If no COMMAND is specified the WGET_ASKPASS or the SSH_ASKPASS environment variable is used. --no-iri turn off IRI support --local-encoding=ENC use ENC as the local encoding for IRIs --remote-encoding=ENC use ENC as the default remote encoding --unlink remove file before clobber --no-xattr turn off storage of metadata in extended file attributesDirectories: -nd, --no-directories don't create directories -x, --force-directories force creation of directories -nH, --no-host-directories don't create host directories --protocol-directories use protocol name in directories -P, --directory-prefix=PREFIX save files to PREFIX/.. --cut-dirs=NUMBER ignore NUMBER remote directory componentsHTTP options: --http-user=USER set http user to USER --http-password=PASS set http password to PASS --no-cache disallow server-cached data --default-page=NAME change the default page name (normally this is 'index.html'.) -E, --adjust-extension save HTML/CSS documents with proper extensions --ignore-length ignore 'Content-Length' header field --header=STRING insert STRING among the headers --compression=TYPE choose compression, one of auto, gzip and none. (default: none) --max-redirect maximum redirections allowed per page --proxy-user=USER set USER as proxy username --proxy-password=PASS set PASS as proxy password --referer=URL include 'Referer: URL' header in HTTP request --save-headers save the HTTP headers to file -U, --user-agent=AGENT identify as AGENT instead of Wget/VERSION --no-http-keep-alive disable HTTP keep-alive (persistent connections) --no-cookies don't use cookies --load-cookies=FILE load cookies from FILE before session --save-cookies=FILE save cookies to FILE after session --keep-session-cookies load and save session (non-permanent) cookies --post-data=STRING use the POST method; send STRING as the data --post-file=FILE use the POST method; send contents of FILE --method=HTTPMethod use method \"HTTPMethod\" in the request --body-data=STRING send STRING as data. --method MUST be set --body-file=FILE send contents of FILE. --method MUST be set --content-disposition honor the Content-Disposition header when choosing local file names (EXPERIMENTAL) --content-on-error output the received content on server errors --auth-no-challenge send Basic HTTP authentication information without first waiting for the server's challengeHTTPS (SSL/TLS) options: --secure-protocol=PR choose secure protocol, one of auto, SSLv2, SSLv3, TLSv1, TLSv1_1, TLSv1_2 and PFS --https-only only follow secure HTTPS links --no-check-certificate don't validate the server's certificate --certificate=FILE client certificate file --certificate-type=TYPE client certificate type, PEM or DER --private-key=FILE private key file --private-key-type=TYPE private key type, PEM or DER --ca-certificate=FILE file with the bundle of CAs --ca-directory=DIR directory where hash list of CAs is stored --crl-file=FILE file with bundle of CRLs --pinnedpubkey=FILE/HASHES Public key (PEM/DER) file, or any number of base64 encoded sha256 hashes preceded by 'sha256//' and separated by ';', to verify peer against --random-file=FILE file with random data for seeding the SSL PRNG --ciphers=STR Set the priority string (GnuTLS) or cipher list string (OpenSSL) directly. Use with care. This option overrides --secure-protocol. The format and syntax of this string depend on the specific SSL/TLS engine.HSTS options: --no-hsts disable HSTS --hsts-file path of HSTS database (will override default)FTP options: --ftp-user=USER set ftp user to USER --ftp-password=PASS set ftp password to PASS --no-remove-listing don't remove '.listing' files --no-glob turn off FTP file name globbing --no-passive-ftp disable the \"passive\" transfer mode --preserve-permissions preserve remote file permissions --retr-symlinks when recursing, get linked-to files (not dir)FTPS options: --ftps-implicit use implicit FTPS (default port is 990) --ftps-resume-ssl resume the SSL/TLS session started in the control connection when opening a data connection --ftps-clear-data-connection cipher the control channel only; all the data will be in plaintext --ftps-fallback-to-ftp fall back to FTP if FTPS is not supported in the target serverWARC options: --warc-file=FILENAME save request/response data to a .warc.gz file --warc-header=STRING insert STRING into the warcinfo record --warc-max-size=NUMBER set maximum size of WARC files to NUMBER --warc-cdx write CDX index files --warc-dedup=FILENAME do not store records listed in this CDX file --no-warc-compression do not compress WARC files with GZIP --no-warc-digests do not calculate SHA1 digests --no-warc-keep-log do not store the log file in a WARC record --warc-tempdir=DIRECTORY location for temporary files created by the WARC writerRecursive download: -r, --recursive specify recursive download -l, --level=NUMBER maximum recursion depth (inf or 0 for infinite) --delete-after delete files locally after downloading them -k, --convert-links make links in downloaded HTML or CSS point to local files --convert-file-only convert the file part of the URLs only (usually known as the basename) --backups=N before writing file X, rotate up to N backup files -K, --backup-converted before converting file X, back up as X.orig -m, --mirror shortcut for -N -r -l inf --no-remove-listing -p, --page-requisites get all images, etc. needed to display HTML page --strict-comments turn on strict (SGML) handling of HTML commentsRecursive accept/reject: -A, --accept=LIST comma-separated list of accepted extensions -R, --reject=LIST comma-separated list of rejected extensions --accept-regex=REGEX regex matching accepted URLs --reject-regex=REGEX regex matching rejected URLs --regex-type=TYPE regex type (posix) -D, --domains=LIST comma-separated list of accepted domains --exclude-domains=LIST comma-separated list of rejected domains --follow-ftp follow FTP links from HTML documents --follow-tags=LIST comma-separated list of followed HTML tags --ignore-tags=LIST comma-separated list of ignored HTML tags -H, --span-hosts go to foreign hosts when recursive -L, --relative follow relative links only -I, --include-directories=LIST list of allowed directories --trust-server-names use the name specified by the redirection URL's last component -X, --exclude-directories=LIST list of excluded directories -np, --no-parent don't ascend to the parent directoryEmail bug reports, questions, discussions to &lt;bug-wget@gnu.org&gt;and/or open issues at https://savannah.gnu.org/bugs/?func=additem&amp;group=wget.","categories":[{"name":"Tech","slug":"Tech","permalink":"http://yakirchen.com/categories/Tech/"}],"tags":[{"name":"macOS","slug":"macOS","permalink":"http://yakirchen.com/tags/macOS/"},{"name":"Tech","slug":"Tech","permalink":"http://yakirchen.com/tags/Tech/"}]},{"title":"JDK 👉 javac","slug":"2018/04-28-jdk-javac","date":"2018-04-27T16:00:00.000Z","updated":"2018-12-06T06:46:47.000Z","comments":true,"path":"2018/04-28-jdk-javac/","link":"","permalink":"http://yakirchen.com/2018/04-28-jdk-javac/","excerpt":"","text":"前置 概述 jdk10 javac 命令行及参数 详细使用javac编译使用模块化构建的源码","categories":[{"name":"Tech","slug":"Tech","permalink":"http://yakirchen.com/categories/Tech/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yakirchen.com/tags/Java/"},{"name":"JDK","slug":"JDK","permalink":"http://yakirchen.com/tags/JDK/"},{"name":"Modular","slug":"Modular","permalink":"http://yakirchen.com/tags/Modular/"}]},{"title":"Rust Develop(Learn) Environment (macOS/windows)","slug":"2018/04-08-rust-develop(learn)-environment","date":"2018-04-07T16:00:00.000Z","updated":"2019-01-22T07:34:09.000Z","comments":true,"path":"2018/04-08-rust-develop(learn)-environment/","link":"","permalink":"http://yakirchen.com/2018/04-08-rust-develop(learn)-environment/","excerpt":"","text":"两种安装方式传统方式安装rustup方式安装(多版本管理 stable / beta / nightly) Ready 代码提示工具 racer-rust/racer rustup工具安装脚本 rustup.sh rustup工具 rustup.rs 配置预先设置环境变量12345export RUST_HOME=$&#123;LOCAL&#125;/rustexport RUSTUP_HOME=$&#123;VOLUMES_SD&#125;/repos/rustupexport RUST_SRC_PATH=$&#123;RUSTUP_HOME&#125;/toolchains/nightly-x86_64-apple-darwin/lib/rustlib/src/rust/srcexport CARGO_HOME=$&#123;VOLUMES_SD&#125;/repos/cargo # cargo 本地包仓库目录export PATH=$RUST_HOME/bin:$CARGO_HOME/bin:$PATH 安装rustup1234curl https://sh.rustup.rs -sSf | sh -s -- \\ --no-modify-path \\ --default-toolchain nightly \\ -y 1rustup-init.exe --no-modify-path --default-toolchain nightly -y 输出提示信息Cargo的安装目录在预先设置的环境变量中已经配置完成添加oh-my-zsh插件12rustup completions zsh &gt; /Users/yakir/.oh-my-zsh/custom/plugins/rustup/_rustup# 在 ~/.zshrc 的plugins列表中添加 `rustup` rustup 基础使用🙈 详见官方 安装不同通道的Rust 123rustup install nightlyrustup install betarustup install stable 更新rust和rutup 12rustup update &amp;&amp; \\ rustup self update 指定运行特定的通道(版本) 12345rustup run stable cargo --versionrustup run nightly rustc --versioncargo +beta --versioncargo +nightly --version 通过rustup安装组件1234567891011121314151617181920# nightlyrustup component add rust-src --toolchain nightlyrustup component add rls-preview --toolchain nightlyrustup component add rust-analysis --toolchain nightlyrustup component add rustfmt-preview --toolchain nightlyrustup component add clippy-preview --toolchain nightly#betarustup component add rust-src --toolchain betarustup component add rls-preview --toolchain betarustup component add rust-analysis --toolchain betarustup component add rustfmt-preview --toolchain betarustup component add clippy-preview --toolchain beta# stablerustup component add rust-src --toolchain stablerustup component add rls-preview --toolchain stablerustup component add rust-analysis --toolchain stablerustup component add rustfmt-preview --toolchain stablerustup component add clippy-preview --toolchain stable 12# 运行clippycargo run --bin cargo-clippy --manifest-path=path_to_clippys_Cargo.toml alias为了偷懒👽12345alias rnr=\"rustup run nightly\"alias rsr=\"rustup run stable\"alias rbr=\"rustup run beta\"alias rsu=\"rustup self update\"alias ru=\"rustup update\" 测试 Rust 可用1234// hello.rsfn main() &#123; println!(\"hello\");&#125; 编译 &amp; 运行123rustc hello.rs./hello # hello 测试 Cargo 可用12345678cargo init --bin honey# Created binary (application) projectcd honeycargo run# Compiling honey v0.1.0 (file:///Users/yakir/Think/honey)# Finished dev [unoptimized + debuginfo] target(s) in 1.18 secs# Running `target/debug/honey`#Hello, world! 组件安装 安装方式一 12cargo install -f -j 6 --all-features -v racer mdbook cargo-src fd-findstrip xxx.... 安装方式二(源码安装) 123456789git clone --depth 1 git@github.com:racer-rust/racer.git# release 编译包cd racer; cargo build --release # 编译之后二进制包在 ./target/release/racer# debug 编译包cd racer; cargo build # 编译之后二进制包在 ./target/debug/racer# 复制二进制包到 环境变量中的路径中 我的 ~/Developer/local/bin 目录添加在 PATH 中 测试 Racer 可用1234567racer complete std::io::B# 输出类似信息# MATCH BufRead,1332,10,/Volumes/Toshiba/repos/rustup/toolchains/nightly-x86_64-apple-darwin/lib/rustlib/src/rust/src/libstd/io/mod.rs,Trait,pub trait BufRead: Read# MATCH Bytes,1959,11,/Volumes/Toshiba/repos/rustup/toolchains/nightly-x86_64-apple-darwin/lib/rustlib/src/rust/src/libstd/io/mod.rs,Struct,pub struct Bytes&lt;R&gt;# MATCH BufReader,56,11,/Volumes/Toshiba/repos/rustup/toolchains/nightly-x86_64-apple-darwin/lib/rustlib/src/rust/src/libstd/io/buffered.rs,Struct,pub struct BufReader&lt;R&gt;# MATCH BufWriter,391,11,/Volumes/Toshiba/repos/rustup/toolchains/nightly-x86_64-apple-darwin/lib/rustlib/src/rust/src/libstd/io/buffered.rs,Struct,pub struct BufWriter&lt;W: Write&gt; 编辑器支持vim 整合Sublime Text 整合Sublime Text 3 Package Control安装, ctrl + ~启动控制台输入1import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) 使用 Package Control 安装 Rust Enhanced + Shift + P 输入 Install Package 安装 Language Server Protocolclone 代码到 sublime Packages 目录中 ${HOME}/Library/Application Support/Sublime Text 3/Packages + Shift + P 输入 Satisfy Dependencies 安装控制台输出 “Package Control: All dependencies have been satisfied”LSP文档 LSP.readthedocs.io, docs 1. 组合一 - RustAutoComplete - anaconda_rust 2. 组合二 工具集lsdhyperfinefdcargo-watch Reference:rustup.rs: https://github.com/rust-lang-nursery/rustup.rs","categories":[{"name":"Tech","slug":"Tech","permalink":"http://yakirchen.com/categories/Tech/"}],"tags":[{"name":"Rust","slug":"Rust","permalink":"http://yakirchen.com/tags/Rust/"},{"name":"Cargo","slug":"Cargo","permalink":"http://yakirchen.com/tags/Cargo/"},{"name":"Racer","slug":"Racer","permalink":"http://yakirchen.com/tags/Racer/"}]},{"title":"Vim Plug 插件管理","slug":"2018/03-30-vim-plug","date":"2018-03-29T16:00:00.000Z","updated":"2018-12-06T06:46:47.000Z","comments":true,"path":"2018/03-30-vim-plug/","link":"","permalink":"http://yakirchen.com/2018/03-30-vim-plug/","excerpt":"","text":"获取NVim安装包Install From Source 在这里12345curl -OL \\ https://github.com/neovim/neovim/releases/download/nightly/nvim-macos.tar.gztar zxvf nvim-macos.tar.gz -C $&#123;SERVRES&#125;# Path 引用 NVim Home Nvim 配置 vim 默认配置路径 ~/.vim 和 ~/.vimrc nvim 默认配置路径 ~/.local/share/nvim 和 ~/.config/init.vim 原本在用户目录下建了软链 ~/.vim 和 ~/.vimrc 分别指向 /Volumes/sd/repos/vim 目录 12345678# `~/.vim`ln -s /Volumes/sd/repos/vim ~/.vimln -s /Volumes/sd/repos/vim ~/.local/share/nvim ln -s /Volumes/sd/repos/vim ~/.config/nvim# `~/.vimrc`ln -s \\ ~/Library/Mobile Documents/com~apple~CloudDocs/Developer/macOS-libs/vimrc \\ ~/.vim/init.vim 试想 Nvim 和 Vim 应该可以共用一个配置目录, 于是尝试了一把. 在目录 ~/.config 和 ~/.local/share 中都建立了一个软链 nvim 指向/Volumes/sd/repos/vim和 Vim 共享配置 在 ~/.config 目录中创建一个软链 init.vim 指向~/Library/Mobile Documents/com~apple~CloudDocs/Developer/macOS-libs/vimrc作为 NVim 的配置文件 插件管理流行的 Vim 插件管理器有好几个, 最先用过的是 Vundle 安装插件的使用有点慢, 换成了 Vim-plug. Vim-plug 安装12curl -fLo ~/.vim/autoload/plug.vim --create-dirs \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim 执行 vim +PlugInstall +qall 或 nvim +PlugInstall +qall 完成插件配置 Vim-plug 常用命令 命令 介绍 PlugUpgrade 升级 Vim-plug 自身 PlugStatus 检查插件的状态 PlugUpdate 安装升级插件 PlugInstall 安装插件 Vim-plug 更多命令参考 附上 vimrc 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182set nocompatible \" 关闭vi兼容模式set t_Co=256 \" 开启终端256色 terminal Colorset showcmdset foldenableset foldmethod=manualset cc=100set foldmethod=markerset autoindentset cindent\"colorscheme gruvboxcolorscheme onedarkset background=darkset termguicolors set laststatus=2 \" 总是显示状态栏set ruler \" 显示光标当前位置set number \" 开启行号显示set cursorline \" 高亮显示当前行/列set cursorcolumnset showmodeset hlsearch \" 高亮显示搜索结果set incsearchset magicset showmatchset binaryset noeolset lcs=tab:▸\\ ,trail:·,eol:¬,nbsp:_set listset ttyfastset so=1syntax enable \" 开启语法高亮功能\" syntax on \" 允许用指定语法高亮配色方案替换默认方案 自适应不同语言的智能缩进filetype plugin onfiletype indent onset autoreadset expandtab \" 将制表符扩展为空格set tabstop=4 \" 设置编辑时制表符占用空格数set shiftwidth=4 \" 设置格式化时制表符占用空格数set softtabstop=4 \" 让 vim 把连续数量的空格视为一个制表符\" set splitbelow \" Open new windows below the current window.set splitright\" color\" color draculaset showmatch \" 括号成对匹配 简写为set smset modifiableset wildmenu \" 增加命令行自动补全操作set history=9999call plug#begin('~/.vim/plugged')\"Plug 'sheerun/vim-polyglot'Plug 'junegunn/vim-easy-align'Plug 'rust-lang/rust.vim'Plug 'racer-rust/vim-racer'Plug 'cespare/vim-toml'Plug 'itchyny/lightline.vim'Plug 'fholgado/minibufexpl.vim'Plug 'Yggdroot/indentLine'Plug 'majutsushi/tagbar'Plug 'ctrlpvim/ctrlp.vim'Plug 'https://github.com/tommcdo/vim-lion.git'Plug 'nathanaelkane/vim-indent-guides'Plug 'scrooloose/nerdtree', &#123; 'on': 'NERDTreeToggle' &#125;\"Plug 'fatih/vim-go', &#123; 'do': ':GoUpdateBinaries' &#125;call plug#end()set hiddenlet g:racer_cmd = '/Volumes/sd/repos/cargo/bin'let g:rustfmt_autosave = 1let g:rust_clip_command = 'pbcopy'\"let g:racer_experimental_completer = 1\" Plugin indentLine settings.let g:indentLine_char = \"┆\"let g:indentLine_enabled = 1let g:autopep8_disable_show_diff = 1\" Switch buffernmap &lt;C-b&gt;n :bnext&lt;CR&gt;nmap &lt;C-b&gt;p :bprev&lt;CR&gt;vmap &lt;C-c&gt; :w !pbcopy&lt;CR&gt;&lt;CR&gt; ### YouCompleteMe (试用用发现体验不是很好… 所以弃用) 1234567cd ~/.vim/plugged/YouCompleteMe`# 使用 macOS 自带 pythonpython ./install.py --all# 还需要安装以下两个组件(不然使用Nvim会报出提示)# `YouCompleteMe unavailable: requires Vim compiled with Python (2.7 or 3.4+) support.`pip2 install --upgrade neovimnpm install -g neovim 然后可以愉快地边玩耍边学(zhuang)习(bi)了 😜 Reference:NeoVimvim-plugYouCompleteMe","categories":[{"name":"Tech","slug":"Tech","permalink":"http://yakirchen.com/categories/Tech/"}],"tags":[{"name":"vim","slug":"vim","permalink":"http://yakirchen.com/tags/vim/"}]},{"title":"Build OpenJDK11 Zero VM on macOS (interpreted mode) [待更新]","slug":"2018/03-13-build-zero-vm-openjdk11-on-macOS","date":"2018-03-12T16:00:00.000Z","updated":"2018-12-06T06:46:47.000Z","comments":true,"path":"2018/03-13-build-zero-vm-openjdk11-on-macOS/","link":"","permalink":"http://yakirchen.com/2018/03-13-build-zero-vm-openjdk11-on-macOS/","excerpt":"","text":"前置环境依赖: 安装一个 JDK8 (当然是越新越好啦🤐) Autogen Autoconf Python 2 Mercurial Libffi Freetype 👉🏼 依赖安装 获得源码1hg clone http://hg.openjdk.java.net/jdk-updates/jdk11u/ 安装依赖freetype123./configure --prefix=$&#123;LOCAL&#125; --without-harfbuzz &amp;&amp; \\ make -j4 &amp;&amp; \\ make install libffi12345678910git clone --depth 1 git@github.com:libffi/libffi.gitcd libffi./autogen.sh &amp;&amp; \\# python ./generate-darwin-source-and-headers.py &amp;&amp; \\./configure --enable-debug \\ --disable-dependency-tracking \\ --enable-purify-safety \\ --prefix=$&#123;LOCAL&#125; &amp;&amp; \\ make -j4 &amp;&amp; \\ make install ccache(optional)123./configure --prefix=$&#123;LOCAL&#125; &amp;&amp; \\ make -j4 &amp;&amp; \\ make install 生成Makefile1234567891011mkdir build &amp;&amp; \\cd build &amp;&amp; \\bash ../configure --with-debug-level=slowdebug \\ --with-boot-jdk=/Library/Java/JavaVirtualMachines/jdk1.8.0_192.jdk/Contents/Home \\ --with-freetype=/Users/yakir \\ --with-freetype-include=/Users/yakir/local/include \\ --disable-warnings-as-errors \\ --with-jvm-features=zero \\ --with-jvm-variants=zero \\ --with-libffi=/Users/yakir/local \\ --with-libffi-include=/Users/yakir/local/include Troubleshooting Error NO. 1 12345configure: Found freetype include files at /Users/yakir/local/include/freetype2 using --with-freetypeconfigure: Could not find ~/local/lib/libfreetype.dylib. Ignoring location.configure: error: Can not find or use freetype at location given by --with-freetype/Volumes/Toshiba/Developer/jdk/jdk9u/common/autoconf/generated-configure.sh: line 82: 5: Bad file descriptorconfigure exiting with result code 1 配置 freetype 如果依赖安装在用户目录下(比如我的 freetype 安装在 /Users/yakir/local 路径下)需要使用完整路径(/Users/yakir)不能使用 ~ . Error NO. 2 12345678910111213Building target 'all' in configuration 'macosx-x86_64-normal-zero-slowdebug'Compiling 8 files for BUILD_TOOLS_LANGTOOLSCompiling 2 files for BUILD_JVMTI_TOOLSmake[3]: *** No rule to make target '/Volumes/sd/Developer/jdk9u/jdk/src/java.base/macosx/conf/zero/jvm.cfg', needed by '/Volumes/sd/Developer/jdk9u/build/macosx-x86_64-normal-zero-slowdebug/support/modules_libs/java.base/jvm.cfg'. Stop.make[3]: *** Waiting for unfinished jobs....make[2]: *** [java.base-copy-jdk] Error 2make[2]: *** Waiting for unfinished jobs....ERROR: Build failed for target 'all' in configuration 'macosx-x86_64-normal-zero-slowdebug' (exit code 2) No indication of failed target found.Hint: Try searching the build log for '] Error'.Hint: See common/doc/building.html#troubleshooting for assistance.make[1]: *** [main] Error 2make: *** [all] Error 2 修改文件 jdk9u/jdk/make/copy/Copy-java.base.gmk 12345vim +97 jdk9u/jdk/make/copy/Copy-java.base.gmk # 这行 JVMCFG_SRC := $(JDK_TOPDIR)/src/java.base/macosx/conf/$(JVMCFG_ARCH)/jvm.cfg# $(JVMCFG_ARCH) 修改为 x86_64# 修改之后# JVMCFG_SRC := $(JDK_TOPDIR)/src/java.base/macosx/conf/x86_64/jvm.cfg Error NO. 3 123456* For target hotspot_variant-zero_libjvm_objs_virtualspace.o:/Volumes/Toshiba/Developer/jdk/jdk9u/hotspot/src/share/vm/memory/virtualspace.cpp:584:14: error: ordered comparison between pointer and zero ('char *' and 'int') if (base() &gt; 0) &#123; ~~~~~~ ^ ~1 error generated.* All command lines available in /Volumes/Toshiba/Developer/jdk/jdk9u/build/macosx-x86_64-normal-zero-slowdebug/make-support/failure-logs. 修改 12345vim +584 jdk9u/hotspot/src/share/vm/memory/virtualspace.cpp把if (base() &gt; 0)# 改成if (base() &gt; (void *) 0) Error No. 4 1234hotspot/src/share/vm/opto/lcm.cpp:42:35: error: ordered comparison between pointer and zero ('address' (aka 'unsigned char *') and 'int')if (Universe::narrow_oop_base() &gt; 0) &#123; // Implies UseCompressedOops.~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~1 error generated. 补丁在此: 8174050: Compilation errors with clang-4.0貌似没这个Error了 验证1234567% java -version openjdk version \"9.0.4-internal\"OpenJDK Runtime Environment (slowdebug build 9.0.4-internal+0-adhoc.yakir.jdk9u)OpenJDK 64-Bit Zero VM (slowdebug build 9.0.4-internal+0-adhoc.yakir.jdk9u, interpreted mode)% javac -versionjavac 9.0.4-internal Update 2018/10/26 OpenJDK9 -&gt; OpenJDK11","categories":[{"name":"Tech","slug":"Tech","permalink":"http://yakirchen.com/categories/Tech/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yakirchen.com/tags/Java/"},{"name":"JDK","slug":"JDK","permalink":"http://yakirchen.com/tags/JDK/"},{"name":"OpenJDK","slug":"OpenJDK","permalink":"http://yakirchen.com/tags/OpenJDK/"},{"name":"ZeroVM","slug":"ZeroVM","permalink":"http://yakirchen.com/tags/ZeroVM/"},{"name":"Hotspot","slug":"Hotspot","permalink":"http://yakirchen.com/tags/Hotspot/"}]},{"title":"Install MySQL From A Tarball","slug":"2017/11-18-Install MySQL From A Tarball","date":"2017-11-17T16:00:00.000Z","updated":"2019-01-07T03:23:18.000Z","comments":true,"path":"2017/11-18-Install MySQL From A Tarball/","link":"","permalink":"http://yakirchen.com/2017/11-18-Install MySQL From A Tarball/","excerpt":"","text":"macOS安装前环境变量配置1234export MYSQL_BASE_DIR=/Volumes/To/servers/mysqlexport MYSQL_DATA_DIR=/Volumes/To/repos/mysql/dataexport MYSQL_LOGS_DIR=/Volumes/To/repos/mysql/logs# 初始化的过程中不要在MySQL的`data`目录中放任何内容 初始化12345678mkdir -p $&#123;MYSQL_LOGS_DIR&#125;mysqld --initialize \\ --user=yakir \\ --basedir=$&#123;MYSQL_BASE_DIR&#125; \\ --datadir=$&#123;MYSQL_DATA_DIR&#125; \\ --log-error=$&#123;MYSQL_LOGS_DIR&#125;/error.log \\ --pid-file=$&#123;MYSQL_DATA_DIR&#125;/mysql.pid \\ --socket=$&#123;MYSQL_DATA_DIR&#125;/mysql.sock --port=3306 获取初始登录密码1cat $&#123;MYSQL_LOGS_DIR&#125;/error.log 启动服务123456789101112mysqld --user=yakir \\ --basedir=$&#123;MYSQL_BASE_DIR&#125; \\ --datadir=$&#123;MYSQL_DATA_DIR&#125; \\ --log-error=$&#123;MYSQL_LOGS_DIR&#125;/error.log \\ --pid-file=$&#123;MYSQL_DATA_DIR&#125;/mysql.pid \\ --socket=$&#123;MYSQL_DATA_DIR&#125;/mysql.sock \\ --server-id=80000 \\ --log-bin=mysql-log \\ --log-bin-index=mysql-log \\ --binlog-format=ROW \\ --binlog-row-event-max-size=1024 \\ --port=3306 &amp; 安全配置向导(optional)./mysql_secure_installation –socket=${MYSQL_DATA_DIR}/mysql.sock 登录MySQL进行用户初始化12345678910111213141516mysql -uroot -p --socket=$&#123;MYSQL_DATA_DIR&#125;/mysql.sock# 输入之前从日志中获取的初始密码# 修改root默认密码ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'qweasd';# 创建用户CREATE USER yakir IDENTIFIED WITH mysql_native_password BY 'qweasd';# ALTER USER yakir IDENTIFIED WITH mysql_native_password BY 'qweasd';# 删除用户# DROP USER 'canal'@'%';# 赋权GRANT ALL PRIVILEGES ON *.* TO 'yakir'@'%' ;FLUSH PRIVILEGES; 关闭MySQL服务1mysqladmin shutdown --socket=$&#123;MYSQL_DATA_DIR&#125;/mysql.sock -uroot -p Debian以下操作都是使用系统root用户 安装前环境变量配置1234# 目录变量定义MYSQL_BASE_DIR='/data/mysql'MYSQL_DATA_DIR='/data/store/mysql'MYSQL_LOGS_DIR='/data/store/logs/mysql' 依赖包check12apt-cache search libaio1apt-get install libaio1 系统配置123456789101112# 添加用户组groupadd mysql # 添加mysql用户useradd -r -g mysql -s /bin/false mysql # 修改目录权限mkdir -p $&#123;MYSQL_DATA_DIR&#125;chmod 750 $&#123;MYSQL_DATA_DIR&#125;chown -R mysql .chgrp -R mysql .chown -R mysql $&#123;MYSQL_DATA_DIR&#125;chgrp -R mysql $&#123;MYSQL_DATA_DIR&#125; 初始化1234567891011121314151617/data/mysql/bin/mysqld --initialize \\ --user=mysql \\ --basedir=$&#123;MYSQL_BASE_DIR&#125; \\ --datadir=$&#123;MYSQL_DATA_DIR&#125; \\ --log-error=$&#123;MYSQL_LOGS_DIR&#125;/error.log \\ --pid-file=$&#123;MYSQL_DATA_DIR&#125;/mysql.pid \\ --socket=$&#123;MYSQL_DATA_DIR&#125;/mysql.sock \\ --port=3306/data/mysql/bin/mysql_ssl_rsa_setup \\ --user=mysql \\ --basedir=$&#123;MYSQL_BASE_DIR&#125; \\ --datadir=$&#123;MYSQL_DATA_DIR&#125; \\ --log-error=$&#123;MYSQL_LOGS_DIR&#125;/error.log \\ --pid-file=$&#123;MYSQL_DATA_DIR&#125;/mysql.pid \\ --socket=$&#123;MYSQL_DATA_DIR&#125;/mysql.sock \\ --port=3306 获取mysql初始化密码 &amp; 更改存储目录权限1234cat $&#123;MYSQL_LOGS_DIR&#125;/error.logchown -R root .chown -R mysql /data/store/mysql 启动实例12345678910111213141516171819202122232425262728echo '启动mysql实例'/data/mysql/bin/mysqld \\ --user=mysql \\ --basedir=$&#123;MYSQL_BASE_DIR&#125; \\ --datadir=$&#123;MYSQL_DATA_DIR&#125; \\ --log-error=$&#123;MYSQL_LOGS_DIR&#125;/error.log \\ --pid-file=$&#123;MYSQL_DATA_DIR&#125;/mysql.pid \\ --socket=$&#123;MYSQL_DATA_DIR&#125;/mysql.sock \\ --server-id=90000 \\ --log-bin=mysql-log \\ --log-bin-index=mysql-log \\ --binlog-format=ROW \\ --binlog-row-event-max-size=1024 \\ --port=3306 &amp;# 启动实例示例# /usr/local/mysql/bin/mysqld \\ --basedir=/usr/local/mysql \\ --datadir=/opt/mysql/data \\ --plugin-dir=/usr/local/mysql/lib/plugin \\ --user=mysql \\ --log-error=/opt/mysql/data/error.log \\ --pid-file=/opt/mysql/data/localhost.localdomain.pid \\ --socket=/opt/mysql/data/mysql.sock \\ --port=3306# 停止实例# /data/mysql/bin/mysqladmin shutdown --socket=/data/store/mysql/mysql.sock -uroot -p 添加用户 &amp; 用户修改见macOS安装 update 10/23/2018 mysql 8.0.13 macOS 10.14 Reference: MySQL安装包下载MySQL用户文档","categories":[{"name":"Tech","slug":"Tech","permalink":"http://yakirchen.com/categories/Tech/"}],"tags":[{"name":"macOS","slug":"macOS","permalink":"http://yakirchen.com/tags/macOS/"},{"name":"MySQL","slug":"MySQL","permalink":"http://yakirchen.com/tags/MySQL/"},{"name":"Data","slug":"Data","permalink":"http://yakirchen.com/tags/Data/"}]},{"title":"macOS安装器解包","slug":"2017/10-13-unpackage-macOS-installer-package","date":"2017-10-12T16:00:00.000Z","updated":"2018-12-06T06:46:47.000Z","comments":true,"path":"2017/10-13-unpackage-macOS-installer-package/","link":"","permalink":"http://yakirchen.com/2017/10-13-unpackage-macOS-installer-package/","excerpt":"","text":"一个场景需要用到较低版本JVM(最终选择的是Java 6)。Oracle没有提供JDK6的安装包，Apple提供了JDK6的安装器，但是不想以Framework的形式安装(洁癖? orn)，所以想着解包自己放到自定义目录。 文中参考链接可以下到Apple包装的JDK 1.6.0_65，以下是解包步骤。 解包步骤1. 挂载dmg镜像2. 创建个目录用来存放解包之后的文件1mkdir pkg &amp;&amp; cd pkg 3. 解包1xar -xf /Volumes/Java\\ for\\ OS\\ X\\ 2015-001/JavaForOSX.pkg 得到一个文件和四个目录，需要关注的是JavaForOSX.pkg这个目录12345DistributionJavaEssentials.pkgJavaForOSX.pkgJavaMDNS.pkgResources 4. 获得需要的资源解包Payload文件12tar zxvf JavaForOSX.pkg/Payload\\ Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents \\ -C ./ 在当前目录生成资源文件目录结构是Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents,Contents包含的内容就是JAVA_HOME,12# 执行拷贝cp -R Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents $&#123;LOCAL&#125;/jdk6 之后就可以得到JDK6 5. 环境变量配置环境变量的时候需要将JAVA_6_HOME指向${LOCAL}/jdk6/Home目录 1234% java -versionjava version \"1.6.0_65\"Java(TM) SE Runtime Environment (build 1.6.0_65-b14-468)Java HotSpot(TM) 64-Bit Server VM (build 20.65-b04-468, mixed mode) by the way无意中发现一款app SuspiciousPackage可以把这些个步骤可视化。打开app ›『File』› 『Open』› 选中镜像中的JavaForOSX.pkg › 选中 All Filestab浏览文件 › 选中Contents ›『File』› 『Export “Contents”』 最后两步导出动作可由快捷键 『Shift+Commond+E』触发 参考链接 Apple JDK维基百科 Xar存档Stack Overflow how-to-unpack-and-pack-pkg-fileSuspiciousPackage","categories":[{"name":"Tech","slug":"Tech","permalink":"http://yakirchen.com/categories/Tech/"}],"tags":[{"name":"macOS","slug":"macOS","permalink":"http://yakirchen.com/tags/macOS/"}]},{"title":"Building GCC 7 on macOS","slug":"2017/09-22-building-gcc7-on-macOS","date":"2017-09-21T16:00:00.000Z","updated":"2018-12-06T06:46:47.000Z","comments":true,"path":"2017/09-22-building-gcc7-on-macOS/","link":"","permalink":"http://yakirchen.com/2017/09-22-building-gcc7-on-macOS/","excerpt":"","text":"概述macOS Sierra 10.13.3 构建 GCC 7 macOS命令行工具1xcode-select --install GCC套件和依赖源包Download GCC源码安装包点击下载gcc-7.3.0.tar.gz 依赖包mpc点击下载mpc-1.1.0.tar.gz 依赖包mpfr点击下载mpfr-3.1.6.tar.gz 依赖包gmp点击下载gmp-6.1.2.tar.bz2 依赖包isl点击下载isl-0.18.tar.bz2 Unpackage &amp; Building12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061export SOURCE_DIR=/Volumes/Toshiba/Developer/tools_source_direxport GCC_HOME=/Users/yakir/Developer/server/gccexport GCC_VERSION=\"7.3.0\"export GMP_VERSION=\"6.1.2\"export MPFR_VERSION=\"3.1.6\"export MPC_VERSION=\"1.1.0\"export ISL_VERSION=\"0.18\"# gmptar -jxvf gmp-$&#123;GMP_VERSION&#125;.tar.bz2 &amp;&amp; \\cd $&#123;SOURCE_DIR&#125;/gmp-$&#123;GMP_VERSION&#125; &amp;&amp; \\mkdir build &amp;&amp; cd build &amp;&amp; \\../configure --prefix=$&#123;GCC_HOME&#125; --enable-cxx &amp;&amp; \\make -j4 &amp;&amp; \\make install# mpfrtar -zxvf mpfr-$&#123;MPFR_VERSION&#125;.tar.gz &amp;&amp; \\cd $&#123;SOURCE_DIR&#125;/mpfr-$&#123;MPFR_VERSION&#125; &amp;&amp; \\mkdir build &amp;&amp; cd build &amp;&amp; \\../configure --prefix=$&#123;GCC_HOME&#125; --with-gmp=$&#123;GCC_HOME&#125; &amp;&amp; \\make -j4 &amp;&amp; \\make install# mpctar -zxvf mpc-$&#123;MPC_VERSION&#125;.tar.gz &amp;&amp; \\cd $&#123;SOURCE_DIR&#125;/mpc-$&#123;MPC_VERSION&#125; &amp;&amp; \\mkdir build &amp;&amp; cd build &amp;&amp; \\../configure --prefix=$&#123;GCC_HOME&#125; \\--with-gmp=$&#123;GCC_HOME&#125; \\--with-mpfr=$&#123;GCC_HOME&#125; &amp;&amp; \\make -j4 &amp;&amp; \\make install# isltar -jxvf isl-$&#123;ISL_VERSION&#125;.tar.bz2 &amp;&amp; \\cd $&#123;SOURCE_DIR&#125;/isl-$&#123;ISL_VERSION&#125; &amp;&amp; \\mkdir build &amp;&amp; cd build &amp;&amp; \\../configure --prefix=$&#123;GCC_HOME&#125; --with-gmp-prefix=$&#123;GCC_HOME&#125; &amp;&amp; \\make -j4 &amp;&amp; \\make install# gcctar -zxvf gcc-$&#123;GCC_VERSION&#125;.tar.gz &amp;&amp; \\cd $&#123;SOURCE_DIR&#125;/gcc-$&#123;GCC_VERSION&#125; &amp;&amp; \\mkdir build &amp;&amp; cd build &amp;&amp; \\../configure --prefix=$&#123;GCC_HOME&#125; \\--enable-checking=release \\--enable-host-shared \\--enable-compressed-debug-sections=all \\--enable-bootstrap \\--with-gmp=$&#123;GCC_HOME&#125; \\--with-mpfr=$&#123;GCC_HOME&#125; \\--with-mpc=$&#123;GCC_HOME&#125; \\--enable-languages=c,c++,fortran,lto,objc,obj-c++ \\--enable-host-shared \\--with-isl=$&#123;GCC_HOME&#125; \\--program-suffix=7 &amp;&amp; \\make -j4 &amp;&amp; \\make install GCC套件环境变量配置配置环境变量 12export GCC_HOME=$SERVER_BASE_HOME/gccPATH=$&#123;GCC_HOME&#125;/bin:$PATH g++测试1234567891011% g++7 --versiong++7 (GCC) 7.3.0Copyright © 2017 Free Software Foundation, Inc.本程序是自由软件；请参看源代码的版权声明。本软件没有任何担保；包括没有适销性和某一专用目的下的适用性担保。% gcc7 --versiongcc7 (GCC) 7.3.0Copyright © 2017 Free Software Foundation, Inc.本程序是自由软件；请参看源代码的版权声明。本软件没有任何担保；包括没有适销性和某一专用目的下的适用性担保。 12345678910111213141516#include &lt;iostream&gt;using namespace std;int main()&#123; for (int i = 0; i &lt; 5; ++i)&#123; cout &lt;&lt; \"Hello GCC 7.3 ! count \" &lt;&lt; i &lt;&lt; endl; &#125; return 0;&#125;/* 编译 &amp; 运行 &amp; 输出% g++7 test.cpp -o test% ./test Hello GCC 7.3 ! count 0Hello GCC 7.3 ! count 1Hello GCC 7.3 ! count 2Hello GCC 7.3 ! count 3Hello GCC 7.3 ! count 4*/ change_log Upgrade gcc 7.3 参考: Compiling GCC 7 on macOS","categories":[{"name":"Tech","slug":"Tech","permalink":"http://yakirchen.com/categories/Tech/"}],"tags":[{"name":"GCC","slug":"GCC","permalink":"http://yakirchen.com/tags/GCC/"},{"name":"Cpp","slug":"Cpp","permalink":"http://yakirchen.com/tags/Cpp/"}]},{"title":"Junit 5 Quick Start","slug":"2017/08-07-junit5-quick-start","date":"2017-08-06T16:00:00.000Z","updated":"2018-12-13T11:09:51.000Z","comments":true,"path":"2017/08-07-junit5-quick-start/","link":"","permalink":"http://yakirchen.com/2017/08-07-junit5-quick-start/","excerpt":"","text":"目录 Quick Start Maven集成 Gradle集成 Quick StartMaven依赖配置_摘录_123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;maven.compiler.source&gt;11&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;11&lt;/maven.compiler.target&gt; &lt;!-- junit --&gt; &lt;org.junit5.platform.version&gt;1.3.2&lt;/org.junit5.platform.version&gt; &lt;org.junit5.jupiter.version&gt;5.3.2&lt;/org.junit5.jupiter.version&gt; &lt;org.junit5.vintage.version&gt;5.3.2&lt;/org.junit5.vintage.version&gt;&lt;/properties&gt;&lt;!-- junit5 &amp; junit4 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.junit.platform&lt;/groupId&gt; &lt;artifactId&gt;junit-platform-launcher&lt;/artifactId&gt; &lt;version&gt;$&#123;org.junit5.platform.version&#125;&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.junit.platform&lt;/groupId&gt; &lt;artifactId&gt;junit-platform-engine&lt;/artifactId&gt; &lt;version&gt;$&#123;org.junit5.platform.version&#125;&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt; &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt; &lt;version&gt;$&#123;org.junit5.jupiter.version&#125;&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt; &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt; &lt;version&gt;$&#123;org.junit5.jupiter.version&#125;&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt; &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt; &lt;version&gt;$&#123;org.junit5.vintage.version&#125;&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt; &lt;artifactId&gt;junit-jupiter-params&lt;/artifactId&gt; &lt;version&gt;$&#123;org.junit5.jupiter.version&#125;&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;$&#123;junit4.version&#125;&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt; Gradle依赖配置_摘录_12345678910111213141516171819202122allprojects &#123; apply plugin: \"java\" apply plugin: \"maven\" apply plugin: \"idea\" sourceCompatibility = 11 targetCompatibility = 11&#125;ext &#123; /* test */ junit5_platform_version = \"1.2.0\" junit5_jupiter_version = \"5.2.0\"&#125;testCompile( \"org.junit.jupiter:junit-jupiter-api:$&#123;junit5_jupiter_version&#125;\")testRuntime( \"org.junit.platform:junit-platform-launcher:$&#123;junit5_platform_version&#125;\", \"org.junit.jupiter:junit-jupiter-engine:$&#123;junit5_jupiter_version&#125;\") 用例注解12345678910@Test // 一个测试方法@DisplayName // 测试类或方法的显示名称@BeforeEach // 在单个测试方法运行之前执行的方法@AfterEach // 在单个测试方法运行之后执行的方法@BeforeAll // 在所有测试方法运行之前执行的方法(方法必须是静态\\static修饰)@AfterAll // 在所有测试方法运行之后执行的方法(方法必须是静态\\static修饰)@Disabled // 禁用测试类或方法@Tag // 为测试类或方法添加标签@Nested // 嵌套测试@TestFactory // 动态测试 用例123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566/** * Test_LangString * * @author yakir &lt;a href=\"yakirchen.com\"&gt;yakir&lt;/a&gt; on 07/08/2017 18:45. */@DisplayName(\"Test_LangString\")class Test_LangString &#123; private LangString ls; @BeforeAll static void beforeAll() &#123; System.out.printf(\"在所有测试方法运行之前执行的方法\\n\"); &#125; @BeforeEach void beforeEach() &#123; System.out.printf(\"在每个测试方法运行之前执行的方法\\n\"); ls = new LangString(); &#125; @AfterEach void afterEach() &#123; System.out.printf(\"在每个测试方法运行之后执行的方法\\n\"); &#125; @AfterAll static void afterAll() &#123; System.out.printf(\"在所有测试方法运行之后执行的方法\\n\"); &#125; @Test @DisplayName(\"测试 string object\") void test_stringObj() &#123; ls.stringObj(); &#125; @Test @Disabled void donothing() &#123; // do nothing ... &#125; @Nested @DisplayName(\"Test_Inner 嵌套测试\") class Test_Inner &#123; @BeforeEach void beforeEach() &#123; System.out.printf(\"嵌套测试每个case之前运行\\n\"); &#125; @Test void test_echo() &#123; Echo.echoInfo(\"嵌套测试\"); &#125; &#125;&#125; IDE运行输出12345678910111213在所有测试方法运行之前执行的方法在每个测试方法运行之前执行的方法在每个测试方法运行之后执行的方法8月 07, 2017 9:41:38 下午 com.yakirchen.common.Echo echoInfo信息: 字符串void test.Test_LangString.donothing() is @Disabled在每个测试方法运行之前执行的方法在每个测试方法运行之后执行的方法嵌套测试每个case之前运行8月 07, 2017 9:41:39 下午 com.yakirchen.common.Echo echoInfo信息: 嵌套测试在所有测试方法运行之后执行的方法 Maven集成添加依赖 123456789101112131415161718192021&lt;properties&gt; &lt;plugin.surefire.version&gt;2.22.1&lt;/plugin.surefire.version&gt;&lt;/properties&gt;&lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; &lt;version&gt;$&#123;plugin.surefire.version&#125;&lt;/version&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.junit.platform&lt;/groupId&gt; &lt;artifactId&gt;junit-platform-surefire-provider&lt;/artifactId&gt; &lt;version&gt;$&#123;org.junit5.platform.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt; &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt; &lt;version&gt;$&#123;org.junit5.jupiter.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/plugin&gt; 运行mvn clean verify输出： 1234567891011121314151617181920------------------------------------------------------- T E S T S-------------------------------------------------------Running test.Test_LangString在所有测试方法运行之前执行的方法在每个测试方法运行之前执行的方法在每个测试方法运行之后执行的方法8月 07, 2017 9:47:25 下午 com.yakirchen.common.Echo echoInfo信息: 字符串在每个测试方法运行之前执行的方法在每个测试方法运行之后执行的方法嵌套测试每个case之前运行8月 07, 2017 9:47:25 下午 com.yakirchen.common.Echo echoInfo信息: 嵌套测试在所有测试方法运行之后执行的方法Tests run: 3, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 0.116 sec - in test.Test_LangStringResults :Tests run: 3, Failures: 0, Errors: 0, Skipped: 1 Gradle集成123456789101112131415161718192021222324252627282930/* root */buildscript &#123; repositories &#123; mavenCentral() &#125; dependencies &#123; classpath \"org.junit.platform:junit-platform-gradle-plugin:1.2.0\" &#125;&#125;/* project */apply plugin: \"org.junit.platform.gradle.plugin\"junitPlatform &#123; // platformVersion '1.0.3' filters &#123; engines &#123; // include 'junit-jupiter', 'junit-vintage' // exclude 'custom-engine' &#125; tags &#123; // include 'fast' // exclude 'slow' &#125; // includeClassNamePattern '.*Test' &#125; // enableStandardTestTask true // reportsDir file('build/test-results/junit-platform') // this is the default // logManager 'org.apache.logging.log4j.jul.LogManager'&#125; 运行gradle clean junitPlatform输出： 123456789101112131415161718&gt; Task :java-core:junitPlatformTestTest run finished after 5178 ms[ 1 containers found ][ 0 containers skipped ][ 1 containers started ][ 0 containers aborted ][ 1 containers successful ][ 0 containers failed ][ 0 tests found ][ 0 tests skipped ][ 0 tests started ][ 0 tests aborted ][ 0 tests successful ][ 0 tests failed ]BUILD SUCCESSFUL in 14s5 actionable tasks: 4 executed, 1 up-to-date","categories":[{"name":"Tech","slug":"Tech","permalink":"http://yakirchen.com/categories/Tech/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yakirchen.com/tags/Java/"},{"name":"测试","slug":"测试","permalink":"http://yakirchen.com/tags/测试/"},{"name":"JUnit","slug":"JUnit","permalink":"http://yakirchen.com/tags/JUnit/"}]},{"title":"远处小和山上的落日","slug":"2017/07-28-un-小和山","date":"2017-07-28T11:28:00.000Z","updated":"2018-12-06T06:46:47.000Z","comments":true,"path":"2017/07-28-un-小和山/","link":"","permalink":"http://yakirchen.com/2017/07-28-un-小和山/","excerpt":"","text":"远处小和山上的落日原片 用Photos优化 曝光有点不足，喜欢这个渐变色就留存下来了。","categories":[{"name":"摄影","slug":"摄影","permalink":"http://yakirchen.com/categories/摄影/"}],"tags":[{"name":"Canon","slug":"Canon","permalink":"http://yakirchen.com/tags/Canon/"},{"name":"摄影","slug":"摄影","permalink":"http://yakirchen.com/tags/摄影/"}]},{"title":"Chez Scheme安装初探(macOS)","slug":"2017/06-26-scheme-build-on-macOS","date":"2017-06-25T16:00:00.000Z","updated":"2018-12-13T11:07:23.000Z","comments":true,"path":"2017/06-26-scheme-build-on-macOS/","link":"","permalink":"http://yakirchen.com/2017/06-26-scheme-build-on-macOS/","excerpt":"","text":"1. 获取代码12git clone --recursive --depth 1 git@github.com:cisco/ChezScheme.gitgcr1 git@github.com:cisco/ChezScheme.git 2. 预先配置环境变量12export CHEZ_SCHEME_HOME=$&#123;TO_SERVERS&#125;/chez_schemeexport PATH=$CHEZ_SCHEME_HOME/bin:$PATH 3. macOS X11问题(10/23/2018 貌似现在木有这个问题)macOS在没有X11的情况下，在make阶段会报找不到头文件 (摊手1234expeditor.c:886:10: fatal error: 'X11/Xlib.h' file not found#include &lt;X11/Xlib.h&gt; ^1 error generated. 解决: 注释引用头文件的代码文件路径 vim +297 ChezScheme/c/version.h123#define LIBX11 \"/usr/X11R6/lib/libX11.dylib\"// 变为// #define LIBX11 \"/usr/X11R6/lib/libX11.dylib\" 4. 编译安装123./configure --installprefix=$&#123;CHEZ_SCHEME_HOME&#125;make -j 12make install 5. 安装校验123456# 版本号scheme --version# 9.5.1# 运行scheme 6. 退出1(exit) 入门文档 (感谢 🤓yast-cn维基教科书:Lisp 入门ANSI Common Lisp 中文翻譯版Scheme NoteScheme语言简明教程或者Scheme语言简明教程","categories":[{"name":"Tech","slug":"Tech","permalink":"http://yakirchen.com/categories/Tech/"}],"tags":[{"name":"macOS","slug":"macOS","permalink":"http://yakirchen.com/tags/macOS/"},{"name":"Scheme","slug":"Scheme","permalink":"http://yakirchen.com/tags/Scheme/"},{"name":"Lisp","slug":"Lisp","permalink":"http://yakirchen.com/tags/Lisp/"}]},{"title":"Squirrel构建安装(macOS)","slug":"2016/11-20-squirrel-build-on-macOS","date":"2016-11-19T16:00:00.000Z","updated":"2018-12-10T02:01:47.000Z","comments":true,"path":"2016/11-20-squirrel-build-on-macOS/","link":"","permalink":"http://yakirchen.com/2016/11-20-squirrel-build-on-macOS/","excerpt":"","text":"预览1). 黑色主题 2). 白色主题 编译&amp;安装1. 获得鼠鬚管源码:1git clone --recursive --depth 1 git@github.com:rime/squirrel.git 2. 使用brew安装编译时依赖 brew install cmake boost 2. 预处理 从 App Store 安装 XCode 安装完 XCode 之后, 安装 command-line-tools 1xcode-select --install 3. 构建依赖: CMake，boost CMake 源码: github.com/Kitware/CMake CMake 主页: cmake.org boost 主页: boost.org CMake 编译安装12345678910111213git clone --recursive --depth 1 git@github.com:Kitware/CMake.git CMakecd CMake &amp;&amp; mkdir build &amp;&amp; cd build &amp;&amp; \\ ../bootstrap --parallel=4 --prefix=$&#123;CMAKE_HOME&#125; &amp;&amp; \\ make -j4 &amp;&amp; \\ make install# 验证cmake --version# 输出: # cmake version 3.13.20181209-gdd8c5## CMake suite maintained and supported by Kitware (kitware.com/cmake). boost构建: 更新至1.68版本12345# 引入环境变量 export BOOST_ROOT=/Volumes/Toshiba/repos/boost./bootstrap.sh --prefix=$&#123;BOOST_ROOT&#125; --with-libraries=all &amp;&amp; \\ ./b2 -j4 &amp;&amp; \\ ./b2 -j4 --prefix=$&#123;BOOST_ROOT&#125; install # 默认安装在/usr/local目录下 3. 构建Squirrel依赖1make deps &amp;&amp; make -j4 # do not use make -jX when make deps 4. 构建成功,安装Squirrel1sudo make install 5. 東風破(plum)Rime引入了配置工具東風破/plum, 可以方便下载默认配置 1234git clone --depth 1 git@github.com:rime/plum.gitcd plum &amp;&amp; \\./rime-install :preset &amp;&amp; \\./rime-install --select :all lotem/rime-forge/lotem-packages.conf 修改 installation.yml、squirrel.yml、default.yml 6. 自用配置自用 Squirrel 配置 rime_custom 7. 快捷键 CTRL-.可以切换全\\半角标点符号 CTRL-SHIFT-&lt;数字&gt; 可切换输入法(简体、繁体) SHIFT-Fn-DELETE 从词库中删除错误的词, 然后使用方向键选中词 change-log 从2016/11/20. 试用到2017/1/3. 感觉良好. 更新2017/1/26. 更新一版重新编译安装,稳定了许多. 更新2017/3/8. 扩充词库 更新2017/5/5. Upgrade boost 1.64.0 更新2017/6/5. 更新预览图 更新2017/9/25. 更新boost 1.65.1(更新前记得清理原有版本) 更新2018/4/17. 引入東風破配置工具, 更新boost 1.67 更新2018/8/25. cmake &amp; boost 並行化加速編譯, 更新boost 1.68 更新2018/9/20. macOS 10.14 参考: 「鼠须管」的调教笔记 膜拜大神Cering Linux编译和安装boost库Squirrel 官方安装参考","categories":[{"name":"Tech","slug":"Tech","permalink":"http://yakirchen.com/categories/Tech/"}],"tags":[{"name":"Rime","slug":"Rime","permalink":"http://yakirchen.com/tags/Rime/"},{"name":"Squirrel","slug":"Squirrel","permalink":"http://yakirchen.com/tags/Squirrel/"},{"name":"macOS","slug":"macOS","permalink":"http://yakirchen.com/tags/macOS/"}]}]}